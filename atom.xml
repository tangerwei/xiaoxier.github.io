<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WEB</title>
  <subtitle>WEB ^-^</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaoxier.github.io/"/>
  <updated>2016-05-31T12:31:06.000Z</updated>
  <id>https://xiaoxier.github.io/</id>
  
  <author>
    <name>龙儿</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="https://xiaoxier.github.io/2016/05/31/%E7%BB%A7%E6%89%BF/"/>
    <id>https://xiaoxier.github.io/2016/05/31/继承/</id>
    <published>2016-05-31T11:18:27.000Z</published>
    <updated>2016-05-31T12:31:06.000Z</updated>
    
    <content type="html">&lt;p&gt;title: JS原型继承 date: 2016-01-12 title: 原型继承 tags: 继承 categories: JS feature: &lt;a href=&quot;http://i2.buimg.com/6a75956e15f23fa7.jpg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://i2.buimg.com/6a75956e15f23fa7.jpg&lt;/a&gt; shadow: true toc: true — ###### 原型继承很简单。在基于原型的语言中只有对象，没有类。有两种方式来创建一个新对象—“无中生有”对象创建法或者通过现有对象创建。在Javascript中Object.create方法用来创建新的对象。新的对象会通过新的属性进行扩展。 ##### 原型继承与基于类的比较:&lt;/p&gt;
&lt;p&gt;| 基于类的继承 | 原型继承 |&lt;br&gt;| 类是不可变的。在运行时，你无法修改或者添加新的方法 | 原型是灵活的。他们可以是不可变的也可以是可变的 |&lt;br&gt;| 类可能会不支持多重继承 | 对象可以继承多个原型对象 |&lt;br&gt;| 基于类的继承比较复杂。你需要使用抽象类，接口和final类等等 | 原型继承比较简洁。你只有对象，你只需要对对象进行扩展就可以了 |&lt;/p&gt;
&lt;h3 id=&quot;“无中生有”对象创建法-Javascript中得Object-creat方法用来从0开始创建一个对象，如：-var-object-Object-create-null-克隆一个现有对象-Object-creat方法也可以克隆一个现有对象，如-var-rectangle-area-function-return-this-width-this-height-var-rect-Object-create-rectangle-扩展一个新创建的对象-上面的例子中我们克隆了rectangle对象命名为rect，但是在我们使用rect的area方法之前我们需要扩展它的width和height属性，如-rect-width-5-rect-height-10-alert-rect-area-然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个rectangle对象的克隆上手动定义width和height属性。这里就要用到构造函数，暂不赘述。-原文地址：-http-aaditmshah-github-io-why-prototypal-inheritance-matters&quot;&gt;&lt;a href=&quot;#“无中生有”对象创建法-Javascript中得Object-creat方法用来从0开始创建一个对象，如：-var-object-Object-create-null-克隆一个现有对象-Object-creat方法也可以克隆一个现有对象，如-var-rectangle-area-function-return-this-width-this-height-var-rect-Object-create-rectangle-扩展一个新创建的对象-上面的例子中我们克隆了rectangle对象命名为rect，但是在我们使用rect的area方法之前我们需要扩展它的width和height属性，如-rect-width-5-rect-height-10-alert-rect-area-然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个rectangle对象的克隆上手动定义width和height属性。这里就要用到构造函数，暂不赘述。-原文地址：-http-aaditmshah-github-io-why-prototypal-inheritance-matters&quot; class=&quot;headerlink&quot; title=&quot;“无中生有”对象创建法 ###### Javascript中得Object.creat方法用来从0开始创建一个对象，如： var object = Object.create(null) ; ### 克隆一个现有对象 ###### Object.creat方法也可以克隆一个现有对象，如: var rectangle = { area : function(){ return this.width * this.height ; } } ; var rect = Object.create(rectangle) ; ### 扩展一个新创建的对象 ###### 上面的例子中我们克隆了rectangle对象命名为rect，但是在我们使用rect的area方法之前我们需要扩展它的width和height属性，如: rect.width = 5 ; rect.height = 10 ; alert(rect.area()) ; ###### 然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个rectangle对象的克隆上手动定义width和height属性。这里就要用到构造函数，暂不赘述。 原文地址： http://aaditmshah.github.io/why-prototypal-inheritance-matters/&quot;&gt;&lt;/a&gt;“无中生有”对象创建法 ###### Javascript中得Object.creat方法用来从0开始创建一个对象，如： &lt;code&gt;var object = Object.create(null) ;&lt;/code&gt; ### 克隆一个现有对象 ###### Object.creat方法也可以克隆一个现有对象，如: &lt;code&gt;var rectangle = { area : function(){ return this.width * this.height ; } } ; var rect = Object.create(rectangle) ;&lt;/code&gt; ### 扩展一个新创建的对象 ###### 上面的例子中我们克隆了rectangle对象命名为rect，但是在我们使用rect的area方法之前我们需要扩展它的width和height属性，如: &lt;code&gt;rect.width = 5 ; rect.height = 10 ; alert(rect.area()) ;&lt;/code&gt; ###### 然而这种方式来创建一个对象的克隆然后扩展它是一个非常傻缺的方法。我们需要在每个rectangle对象的克隆上手动定义width和height属性。这里就要用到构造函数，暂不赘述。 &lt;span&gt;原文地址： &lt;a href=&quot;http://aaditmshah.github.io/why-prototypal-inheritance-matters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://aaditmshah.github.io/why-prototypal-inheritance-matters/&lt;/a&gt;&lt;/span&gt;&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;title: JS原型继承 date: 2016-01-12 title: 原型继承 tags: 继承 categories: JS feature: &lt;a href=&quot;http://i2.buimg.com/6a75956e15f23fa7.jpg&quot; target=&quot;_b
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS面向对象基础讲解</title>
    <link href="https://xiaoxier.github.io/2016/01/30/%E5%AF%B9%E8%B1%A1/"/>
    <id>https://xiaoxier.github.io/2016/01/30/对象/</id>
    <published>2016-01-29T16:00:00.000Z</published>
    <updated>2016-05-29T02:34:03.000Z</updated>
    
    <content type="html">&lt;p&gt;工厂模式-构造函数模式-原型模式-混合模式-动态原型模式&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
 &lt;pre&gt;  面向对象可以把程序中的关键模块都视为对象，而模块拥有属性及方法。这样我们如果把一些属性及方法封装起来，日后使用将非常方便，也可以避免繁琐重复的工作。接下来将为大家讲解在JS中面向对象的实现。&lt;/pre&gt;

&lt;p&gt; 工厂模式&lt;/p&gt;
&lt;pre&gt;  工厂模式是软件工程领域一种广为人知的设计模式，而由于在ECMAScript中无法创建类，因此用函数封装以特定接口创建对象。其实现方法非常简单，也就是在函数内创建一个对象，给对象赋予属性及方法再将对象返回即可。&lt;/pre&gt;


&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function createBlog(name,sex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var o = new Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o.sex = sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o.saysexl= function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(this.sex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var blog1 = createBlog(&amp;apos;longer&amp;apos;,&amp;apos;girl&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;  可以看到工厂模式的实现方法非常简单，解决了创建多个相似对象的问题，但是工厂模式却无从识别对象的类型，因为全部都是Object，不像Date、Array等，因此出现了构造函数模式。&lt;/pre&gt;
 构造函数模式

    &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Blog(name, sex) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var o = new Object();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o.sex = sex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;o.saysex= function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(this.sex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return o;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var blog = new Blog(&amp;apos;longer&amp;apos;,&amp;apos;girl&amp;apos;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(blog instanceof Blog)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;没有显示的创建对象
直接将属性和方法赋值给了this对象
没有return语句
使用new创建对象
能够识别对象（这正是构造函数模式胜于工厂模式的地方）
使用构造函数的最大的问题在于每次创建实例的时候都要重新创建一次方法（理论上每次创建对象的时候对象的属性均不同，而对象的方法是相同的），&lt;/pre&gt;
原型模式
&lt;pre&gt;我们创建的每个函数都有prototype（原型）属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以由特定类型的所有实例共享的属性和方法。使用原型对象的好处就是可以让所有对象实例共享它所包含的属性及方法。&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;  function Blog() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blog.prototype.name = &amp;apos;longer&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blog.prototype.sex =     &amp;apos;girl&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blog.prototype.friend = [&amp;apos;fr1&amp;apos;, &amp;apos;fr2&amp;apos;, &amp;apos;fr3&amp;apos;, &amp;apos;fr4&amp;apos;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blog.prototype.alertInfo = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(this.name + this.sex + this.friend );&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 以下为测试代码&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var blog = new Blog(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog2 = new Blog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog.alertInfo();  //   wuyuchanghttp://tools.jb51.net/fr1,fr2,fr3,fr4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog2.alertInfo();  // wuyuchanghttp://tools.jb51.net/fr1,fr2,fr3,fr4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog.name = &amp;apos;long&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog.url = &amp;apos;male&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog.friend.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog2.name = &amp;apos;wyc2&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog2.url = &amp;apos;http://+++.com&amp;apos;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog.alertInfo();  // wyc1http://***.comfr1,fr2,fr3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog2.alertInfo();  //    wyc2http://+++.comfr1,fr2,fr3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;  它省略了构造函数传递初始化参数这一环节，结果所有实例在默认情况下都取得了相同的属性值，这样非常不方便&lt;/pre&gt;
 混合模式

     &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;function Blog(name, url, friend) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.url = url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.friend = friend;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blog.prototype.alertInfo = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(this.name + this.url + this.friend);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var blog = new Blog(&amp;apos;wuyuchang&amp;apos;, &amp;apos;http://tools.jb51.net/&amp;apos;, [&amp;apos;fr1&amp;apos;, &amp;apos;fr2&amp;apos;, &amp;apos;fr3&amp;apos;]),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog2 = new Blog(&amp;apos;wyc&amp;apos;, &amp;apos;http://**.com&amp;apos;, [&amp;apos;a&amp;apos;, &amp;apos;b&amp;apos;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog.friend.pop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; blog.alertInfo();  // wuyuchanghttp://tools.jb51.net/fr1,fr2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; blog2.alertInfo();//wychttp://**.coma,b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;pre&gt;  混合模式中构造函数模式用于定义实例属性，而原型模式用于定义方法和共享属性。每个实例都会有自己的一份实例属性，但同时又共享着方法，最大限度的节省了内存。另外这种模式还支持传递初始参数。优点甚多。这种模式在ECMAScript中是使用最广泛、认同度最高的一种创建自定义对象的方法。,&lt;/pre&gt;
 动态原型模式
&lt;pre&gt;动态原型模式将所有信息封装在了构造函数中，而通过构造函数中初始化原型（仅第一个对象实例化时初始化原型），这个可以通过判断该方法是否有效而选择是否需要初始化原型。&lt;/pre&gt;

   &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;function Blog(name, url) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.name = name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;this.url = url;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;if (typeof this.alertInfo != &amp;apos;function&amp;apos;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 这段代码只执行了一次&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(&amp;apos;exe time&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Blog.prototype.alertInfo = function() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;alert(thia.name + this.url);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var blog = new Blog(&amp;apos;longer&amp;apos;, &amp;apos;http://tools.jb51.net&amp;apos;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;blog2 = new Blog(&amp;apos;wyc&amp;apos;, &amp;apos;http:***.com&amp;apos;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; &lt;pre&gt;每次创建实例都会重新执行函数，我们可以通过判断类型是否是函数来选择是否执行函数&lt;/pre&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;工厂模式-构造函数模式-原型模式-混合模式-动态原型模式&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="https://xiaoxier.github.io/categories/JS/"/>
    
    
      <category term="模式" scheme="https://xiaoxier.github.io/tags/%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>renturn基础用法</title>
    <link href="https://xiaoxier.github.io/2015/01/31/return/"/>
    <id>https://xiaoxier.github.io/2015/01/31/return/</id>
    <published>2015-01-30T16:00:00.000Z</published>
    <updated>2016-05-28T12:44:09.000Z</updated>
    
    <content type="html">&lt;p&gt;return 语法-作用&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;一、renturn 表达式；语句结束函数执行，返回调用函数，表达式的值作为函数的结果。&lt;/p&gt;
&lt;p&gt;二、return：返回值&lt;/p&gt;
&lt;p&gt;1）fn1() ==&amp;gt; return 后面的值；匿名函数返回函数代码块。&lt;/p&gt;
&lt;p&gt;2）如果没有写return，所有函数默认返回值：未定义；&lt;/p&gt;
&lt;p&gt;3）return只能有一个返回值，同时跳出函数，不再执行代码。&lt;/p&gt;
&lt;p&gt;3）可以控制函数体中的代码执行到指定就结束&lt;/p&gt;
&lt;p&gt;三、return作用&lt;/p&gt;
&lt;p&gt;return false；1.阻止默认事件行为。终止符；2.return false 只在当前函数有效，不会影响其他外部函数的执行。&lt;/p&gt;
&lt;p&gt;return true；执行符&lt;/p&gt;
&lt;p&gt;return；     把控制权返回给页面&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;return 语法-作用&lt;/p&gt;
    
    </summary>
    
      <category term="JS" scheme="https://xiaoxier.github.io/categories/JS/"/>
    
    
      <category term="return" scheme="https://xiaoxier.github.io/tags/return/"/>
    
  </entry>
  
  <entry>
    <title>Hexo</title>
    <link href="https://xiaoxier.github.io/2011/03/02/hell/"/>
    <id>https://xiaoxier.github.io/2011/03/02/hell/</id>
    <published>2011-03-01T16:00:00.000Z</published>
    <updated>2016-05-28T13:43:04.000Z</updated>
    
    <content type="html">&lt;p&gt;  搭建Github静态博客&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;1-环境&quot;&gt;&lt;a href=&quot;#1-环境&quot; class=&quot;headerlink&quot; title=&quot;1.环境&quot;&gt;&lt;/a&gt;1.环境&lt;/h1&gt;&lt;h2 id=&quot;1-1安装Git&quot;&gt;&lt;a href=&quot;#1-1安装Git&quot; class=&quot;headerlink&quot; title=&quot;1.1安装Git&quot;&gt;&lt;/a&gt;1.1安装Git&lt;/h2&gt;&lt;p&gt;请参考【1】&lt;/p&gt;
&lt;h2 id=&quot;1-2安装node-js&quot;&gt;&lt;a href=&quot;#1-2安装node-js&quot; class=&quot;headerlink&quot; title=&quot;1.2安装node.js&quot;&gt;&lt;/a&gt;1.2安装node.js&lt;/h2&gt;&lt;p&gt;下载：&lt;a href=&quot;http://nodejs.org/download/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://nodejs.org/download/&lt;/a&gt;&lt;br&gt;安装时直接保持默认配置即可&lt;/p&gt;
&lt;h1 id=&quot;2-配置Github&quot;&gt;&lt;a href=&quot;#2-配置Github&quot; class=&quot;headerlink&quot; title=&quot;2.配置Github&quot;&gt;&lt;/a&gt;2.配置Github&lt;/h1&gt;&lt;h2 id=&quot;1-1建立Repository&quot;&gt;&lt;a href=&quot;#1-1建立Repository&quot; class=&quot;headerlink&quot; title=&quot;1.1建立Repository&quot;&gt;&lt;/a&gt;1.1建立Repository&lt;/h2&gt;&lt;p&gt;建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】&lt;/p&gt;
&lt;h2 id=&quot;1-2配置SSH-Key&quot;&gt;&lt;a href=&quot;#1-2配置SSH-Key&quot; class=&quot;headerlink&quot; title=&quot;1.2配置SSH-Key&quot;&gt;&lt;/a&gt;1.2配置SSH-Key&lt;/h2&gt;&lt;p&gt;参考【1】&lt;/p&gt;
&lt;h1 id=&quot;3-安装hexo&quot;&gt;&lt;a href=&quot;#3-安装hexo&quot; class=&quot;headerlink&quot; title=&quot;3.安装hexo&quot;&gt;&lt;/a&gt;3.安装hexo&lt;/h1&gt;&lt;p&gt;关于Hexotic的安装配置过程，请以官方Hexo【2】给出的步骤为准。&lt;/p&gt;
&lt;h2 id=&quot;3-1Installation&quot;&gt;&lt;a href=&quot;#3-1Installation&quot; class=&quot;headerlink&quot; title=&quot;3.1Installation&quot;&gt;&lt;/a&gt;3.1Installation&lt;/h2&gt;&lt;p&gt;打开Git命令行，执行如下命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ npm install -g hexo&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-2-Qucik-Start&quot;&gt;&lt;a href=&quot;#3-2-Qucik-Start&quot; class=&quot;headerlink&quot; title=&quot;3.2 Qucik Start&quot;&gt;&lt;/a&gt;3.2 Qucik Start&lt;/h2&gt;&lt;h6 id=&quot;1-Setup-your-blog&quot;&gt;&lt;a href=&quot;#1-Setup-your-blog&quot; class=&quot;headerlink&quot; title=&quot;1. Setup your blog&quot;&gt;&lt;/a&gt;1. Setup your blog&lt;/h6&gt;&lt;p&gt;在电脑中建立一个名字叫「Hexo」的文件夹（比如我建在了D:\Hexo），然后在此文件夹中右键打开Git Bash。执行下面的命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo init&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[info] Copying data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[info] You are almost done! Don&amp;apos;t forget to run `npm install` before you start b&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;logging with Hexo!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Hexo随后会自动在目标文件夹建立网站所需要的文件。然后按照提示，运行 npm install（在 /D/Hexo下）&lt;/p&gt;
&lt;p&gt;会在D:\Hexo目录中安装 node_modules。&lt;/p&gt;
&lt;h6 id=&quot;2-Start-the-server&quot;&gt;&lt;a href=&quot;#2-Start-the-server&quot; class=&quot;headerlink&quot; title=&quot;2.Start the server&quot;&gt;&lt;/a&gt;2.Start the server&lt;/h6&gt;&lt;p&gt;运行下面的命令（在 /D/Hexo下）&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;表明Hexo Server已经启动了，在浏览器中打开 &lt;a href=&quot;http://localhost:4000/，这时可以看到Hexo已为你生成了一篇blog。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/，这时可以看到Hexo已为你生成了一篇blog。&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;你可以按Ctrl+C 停止Server。&lt;/p&gt;
&lt;h6 id=&quot;3-Creat-a-new-post&quot;&gt;&lt;a href=&quot;#3-Creat-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;3.Creat a new post&quot;&gt;&lt;/a&gt;3.Creat a new post&lt;/h6&gt;&lt;p&gt;新打开一个git bash命令行窗口，cd到/D/Hexo下，执行下面的命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &amp;quot;My New Post&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[info] File created at d:\Hexo\source\_posts\My-New-Post.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;刷新&lt;a href=&quot;http://localhost:4000/，可以发现已生成了一篇新文章&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:4000/，可以发现已生成了一篇新文章&lt;/a&gt; “My New Post”。&lt;/p&gt;
&lt;h4 id=&quot;Note：&quot;&gt;&lt;a href=&quot;#Note：&quot; class=&quot;headerlink&quot; title=&quot;Note：&quot;&gt;&lt;/a&gt;Note：&lt;/h4&gt;&lt;p&gt;有一个问题，发现 “My New Post” 被发了2遍，在Hexo server所在的git bash窗口也能看到create了2次。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[info] Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[create] d:\Hexo\source\_posts\My-New-Post.md&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[create] d:\Hexo\source\_posts\My-New-Post.md&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Have-Fun&quot;&gt;&lt;a href=&quot;#Have-Fun&quot; class=&quot;headerlink&quot; title=&quot;Have Fun!!!&quot;&gt;&lt;/a&gt;Have Fun!!!&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;p&gt;  搭建Github静态博客&lt;/p&gt;
    
    </summary>
    
      <category term="hexo" scheme="https://xiaoxier.github.io/categories/hexo/"/>
    
    
      <category term="hexo" scheme="https://xiaoxier.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>经典题目</title>
    <link href="https://xiaoxier.github.io/2011/01/30/answer/"/>
    <id>https://xiaoxier.github.io/2011/01/30/answer/</id>
    <published>2011-01-29T16:00:00.000Z</published>
    <updated>2016-05-28T12:30:11.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果大家觉得自己JS很牛的话，不妨来试试&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;1.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return typeof arguments;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;答案：’object’&lt;br&gt;arguments 是对象，虽然像数组&lt;br&gt;2.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var f = function g()&amp;#123; return 23; &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;typeof g();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;答案：Error&lt;br&gt;g未定义。&lt;br&gt;在 JS 里，声明函数只有 2 种方法：&lt;br&gt;第 1 种： function foo(){…} （函数声明）&lt;br&gt;第 2 种： var foo = function(){…} （等号后面必须是匿名函数，这句实质是函数表达式）&lt;/p&gt;
&lt;p&gt;除此之外，类似于 var foo = function bar(){…} 这样的东西统一按 2 方法处理，即在函数外部无法通过 bar 访问到函数，因为这已经变成了一个表达式。&lt;/p&gt;
&lt;p&gt;但为什么不是 “undefined”？&lt;br&gt;这里如果求 typeof g ，会返回 undefined，但求的是 g()，所以会去先去调用函数 g，这里就会直接抛出异常，所以是 Error。&lt;br&gt;3.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function(x)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;delete x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;答案;1&lt;br&gt;delete操作符用于删除对象的成员变量，不能删除函数的参数&lt;br&gt;4.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var y = 1, x = y = typeof x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;x;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;答案：‘undefined’&lt;br&gt;先定义了y并赋值为1，然后typeof赋值给y，此时x未定义，故为‘undefined’，最后将y的值赋给x&lt;br&gt;5.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(function f(f)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return typeof f();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(function()&amp;#123; return 1; &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;答案：‘number’&lt;br&gt;在函数里的f（）其实是参数的那个f的执行结果，所以是typeof 1，也就是‘number’&lt;br&gt;6.&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var foo = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bar: function() &amp;#123; return this.baz; &amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;baz: 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(function()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;return typeof arguments[0]();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)(foo.bar);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;答案：‘undefined’&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;如果大家觉得自己JS很牛的话，不妨来试试&lt;/p&gt;
&lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;
    
    </summary>
    
      <category term="JS" scheme="https://xiaoxier.github.io/categories/JS/"/>
    
    
      <category term="答案" scheme="https://xiaoxier.github.io/tags/%E7%AD%94%E6%A1%88/"/>
    
  </entry>
  
</feed>
